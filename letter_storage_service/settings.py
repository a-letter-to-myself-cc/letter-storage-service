"""
Django settings for letter_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys
import json
from dotenv import load_dotenv
from pathlib import Path
from google.oauth2 import service_account

# BASE_DIR 설정
BASE_DIR = Path(__file__).resolve().parent.parent

# 하위 서비스 폴더들(emotion_analysis 등)이 패키지로 인식되도록 sys.path에 루트(BASE_DIR)를 추가함
# 안 해주면 모놀리식 실행 시 'No module named emotions' 같은 import 에러 뜸 
sys.path.append(str(BASE_DIR))

# DEBUG 환경 변수를 사용하여 개발 환경인지 판단
if os.getenv('DEBUG') == 'True': # DEBUG가 True일 때만 .env 로드
    load_dotenv(os.path.join(BASE_DIR, '.env'))

SECRET_KEY = os.getenv('SECRET_KEY')

# gcp 버킷 환경변수 설정
# os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.path.join(BASE_DIR, 'gcs-key.json')

# GCP 버킷 환경변수 설정 및 GCS 클라이언트 인증 객체 준비 
GCP_SERVICE_ACCOUNT_CREDENTIALS_JSON_STRING = os.getenv('GCP_SA_KEY')

# GCS 클라이언트 인증 객체와 GCS 프로젝트 ID None으로 초기화
GCS_CREDENTIALS = None
GCP_PROJECT_ID = None

if GCP_SERVICE_ACCOUNT_CREDENTIALS_JSON_STRING:
    try:
        # 환경 변수에서 JSON 문자열을 파싱
        GCP_SERVICE_ACCOUNT_INFO = json.loads(GCP_SERVICE_ACCOUNT_CREDENTIALS_JSON_STRING)

        # google-oauth2의 Credentials 객체 생성
        GCS_CREDENTIALS = service_account.Credentials.from_service_account_info(GCP_SERVICE_ACCOUNT_INFO)

        # JSON 정보에서 프로젝트 ID 추출
        GCP_PROJECT_ID = GCP_SERVICE_ACCOUNT_INFO.get('project_id')

    except json.JSONDecodeError: # 유효하지 않은 JSON 처리
        print("GOOGLE_APPLICATION_CREDENTIALS_JSON이 유효한 JSON 문자열이 아닙니다.")
        
else: # 환경 변수가 없을 경우 -> GCS_CREDENTIALS는 None으로 유지되어 ADC가 자동으로 시도될 수 있다.
    print("GOOGLE_APPLICATION_CREDENTIALS_JSON 환경변수가 존재하지 않습니다.")

BUCKET_NAME = os.getenv('BUCKET_NAME')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '[::1]',
    '0.0.0.0',
    'letter-storage-service',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'letter_storage',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'letter_storage_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'letter_storage_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('LETTER_STORAGE_DB_NAME'),
        'USER': os.getenv('LETTER_STORAGE_DB_USER'),
        'PASSWORD': os.getenv('LETTER_STORAGE_DB_PASSWORD'),
        'HOST': os.getenv('LETTER_STORAGE_DB_HOST'),
        'PORT': os.getenv('LETTER_STORAGE_DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static")  # letter_project/static
# ]



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
